* Most important things to improve and implement:
  1. Store TCP sessions (and implement reassembly) to start showing packets/data
     based on TCP. Also need to print a better view of TCP packets, i.e. the one
     line of information on the main screen.
  2. Implement packet filtering based on BPF.
  3. Port Independent Protocol Identification
     Need to be able to identify application layer protocols without relying on
     the TCP or UDP port number.
  4. Use PACKET_MMAP to remove "read" system calls (prevents copying data from
     kernel to user space.


* GENERAL
- Use reference counting for pointers to objects that need to be "garbage
  collected", e.g. packet_ref and packets.
- Implement possiblity to make a text search for a specific pattern. Should also
  include regex search (possible to use PCRE). Difficult to implement when
  everything is stored in compressed form. Could be based on BPF, i.e only make
  it possible to search what is "inside" the packet and not the text that is
  displayed.
- char *device should not be allocated in the get_default_device function but in the
  caller function instead.
- Implement injecting packets on the network (e.g. to query server response time,
  test the network's ability to handle high traffic volume, etc.
- Make a ring buffer to store the data read from a pcap file. Then I don't need
  to shift the data when consuming frames.
- Use an initial guess for the buffer size when listing interfaces and increase
  this in case there is more, i.e. the same as is done in get_default_interface()
- Can implement support for editing packets, e.g. like WireEdit
  (https://wireedit.com/)
- DNS traceroute to detect malicious DNS injection on transit traffic,
  SIGCOMM 2012 paper.
- Need to check the data structure sizes for overflow,
  see e.g. http://nullprogram.com/blog/2016/10/07/
- If a HTTP packet is encoded in gzip, add the possibility to automatically
  decompress it.
- Print out information about a pcap file, e.g.:
  Size: 368 MB
  Packets: 791615
  Flows: 40686
  Average packet size: 449 bytes
  Duration: 5 minutes
  Number Applications: 132
- Should print the checksums in hex format.

* Ncurses GUI
- The UI needs to be refactored. Remove pad and change the way rendering is
  implemented.
- Implement a possibility to select multiple list_view headers. Then one can
  print all the selected headers when enter is pressed.
- XXX_RENDER should not be called by calling functions of widgets, but should
  be called in the widgets themselves.
- Need to clean up the interface for the widget_create (constructor) functions.
- Show the reply to a request/query and the opposite, e.g. a DNS response
  related to the DNS query that is being inspected. Can maybe give the line
  number to where the response/query is.
- No need to call the base render functions for the derived functions. The base
  function should only be called one time and does not need to be updated again
  when the derived class changes.
- statusbar should be made into a container. It can have as argument an array
  (or some other structure) that it uses to populate the container and prints
  the buttons etc. When a new screen is pushed the statusbar needs to be updated
  according to what the screen does.
- [Follow TCP stream] Add a hex mode view
- [Follow TCP stream] Add an option to select only one direction, i.e view only
  incoming or outgoing traffic

* Packet decoder
- Remove add_pdu and print_pdu and make packet_data completely "generic", i.e.
  the protocol decoders only add data to packet_data (based on strings, flags,
  etc.) and it's the UI code that needs to traverse this data to display it
  properly. This would make the UI completely orthogonal from the decoder
  implementation itself.
- decoder.h should be autogenerated based on the the other header files in the
  decoder.
- Internal definitions used in the decoder should be moved to internal header
  files.
- Implement a general API to get the different headers that will be independent
  of implementational details (how the structs are organized). This can be used
  by other parts of the program (external header). If I then make a change in
  the implementation, then I don't need to propagate that change for every part
  that needs the packet information. May be a bit difficult to abstract
  properly.
- DNS resource records I need to implement: NSEC, LOC
- Need to support reassembly of "fragmented" TCP segments, e.g. for HTTP requests/
  responses over several TCP segements.
- decode_packet should return struct packet or NULL in case of error. Better than
  having it return a boolean and use packet as a parameter to the function.
- Replace the DNS name arrays in struct dns_info with char ptrs.
- Look at the use of bit fields and portability. Need to make sure that it works
  on big endian machines.
- In order to save memory it's possible to decode packets the way Wireshark does,
  i.e. store all packets on disk and read from it to show the decoded packets.
- Implement error handling
