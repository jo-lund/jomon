#!/bin/bash

DISABLE_GEOIP=0
if [ -z "$CC" ]; then
   CC="gcc"
fi
GEOIP_PATH="/usr/share/GeoIP/GeoIPCity.dat"
BUILD=".build_$$"
PREFIX="/usr/local"

usage()
{
    echo "Usage: ./configure [option]"
    echo ""
    echo "   --disable-geoip         : Build without libGeoIP"
    echo "   --set-geoip-path <path> : Set the default GeoIP path"
    echo "                             [$GEOIP_PATH]"
    echo "   --prefix <PREFIX>       : Install files in PREFIX"
    echo "                             [$PREFIX]"
    echo "   -h, --help              : Display help"
    exit 0
}

check_gcc()
{
    echo -n "[*] Checking for $CC... "

    echo "int main() { return 0; }" > "$BUILD.c"
    $CC "$BUILD.c" -o "$BUILD" &> /dev/null

    if [ ! -x "$BUILD" ]; then
        echo "FAIL";
        echo;
        echo -n "You need a functioning install of $CC. "
        echo -n "This can be installed with \"pacman -S $CC\" or equivalent "
        echo "command for your distribution."
        rm -f "$BUILD.c" "$BUILD"
        exit 1;
    fi

    rm -f "$BUILD.c" "$BUILD"
    echo "OK"
}

check_ncurses()
{
    echo -n "[*] Checking for libncurses... "

    echo -e "#include <ncurses.h>\nint main() { initscr(); endwin(); }" > "$BUILD.c"
    $CC "$BUILD.c" -o "$BUILD" -lncurses &> /dev/null

    if [ ! -x "$BUILD" ]; then
        echo "FAIL"
        echo
        echo -n "You need a functioning install of libncurses. "
        echo -n "This can be installed with \"pacman -S ncurses\" or equivalent "
        echo "command for your distribution."
        rm -f "$BUILD.c" "$BUILD"
        exit 1
    fi

    rm -f "$BUILD.c" "$BUILD"
    echo "OK"
}

check_geoip()
{
    echo -n "[*] Checking for libGeoIP... "

    echo -e "#include <GeoIP.h>\nint main() { GeoIP *gip = GeoIP_open(\"$GEOIP_PATH\", GEOIP_STANDARD); GeoIP_delete(gip); }" >"$BUILD.c"
    $CC "$BUILD.c" -o "$BUILD" -lGeoIP &> /dev/null

    if [ ! -x "$BUILD" ]; then
        echo "FAIL"
        echo
        echo -n "You need a functioning install of libGeoIP. "
        echo -n "This can be installed with \"pacman -S geoip geoip-database "
        echo "geoip-database-extra\" or equivalent command for your distribution."
        rm -f "$BUILD.c" "$BUILD"
        exit 1
    fi

    rm -f "$BUILD.c" "$BUILD"
    echo "OK"
}

check_re2c()
{
    echo -n "[*] Checking for re2c... "

    command -v re2c >/dev/null ||
        {
            echo "FAIL";
            echo;
            echo -n "re2c needs to be installed. This can be installed with ";
            echo "\"pacman -S re2c\" or equivalent command for your distribution.";
            exit 1;
        }

    echo "OK"
}

generate_config()
{
    echo "[*] Generating config..."
    echo > config.mk
    echo "#ifndef CONFIG_H" > config.h
    echo "#define CONFIG_H" >> config.h
    echo >> config.h

    echo "CC=$CC" >> config.mk
    if [[ "$DISABLE_GEOIP" == 1 ]]; then
        echo "#define HAVE_GEOIP 0" >> config.h
        echo "CONFIG_GEOIP=0" >> config.mk
    else
        echo "#define HAVE_GEOIP 1" >> config.h
        echo "#define GEOIP_PATH \"$GEOIP_PATH\"" >> config.h
        echo "CONFIG_GEOIP=1" >> config.mk
    fi
    echo "PREFIX=$PREFIX" >> config.mk
    echo >> config.h
    echo "#endif" >> config.h
}

while [ $# -gt 0 ]; do
    case "$1" in
	-h | --help)
	    usage
	    ;;
        --disable-geoip)
            DISABLE_GEOIP=1
            ;;
        --set-geoip-path)
            shift
            GEOIP_PATH=$1
            ;;
        --prefix)
            shift
            PREFIX=$1
            ;;
        *)
            echo "Invalid option. Use -h for help"
            exit 1;
            ;;
    esac
    shift
done

check_gcc
check_ncurses
if [[ "$DISABLE_GEOIP" == 0 ]]; then
    check_geoip
fi
check_re2c
generate_config
